{"version":3,"sources":["store/reducer.js","Components/Nav/Nav.js","Components/ClimbSearch/ClimbSearch.js","Components/Route/EachRoute.js","Components/Route/Route.js","Containers/Mountain/Mountain.js","Containers/RouteView/RouteView.js","Containers/SavedRoutes/SavedRoutes.js","App.js","serviceWorker.js","index.js"],"names":["initialState","routes","reducer","state","action","type","Nav","props","className","to","exact","ClimbSearch","style","marginTop","htmlFor","onChange","disChange","id","placeholder","difChange","value","onClick","clicked","EachRoute","name","grade","location","Route","Mountain","error","lat","long","distance","minDiff","maxDiff","msg","changeDistance","e","target","setState","changeDifficulty","difficulty","findRoutes","a","process","axios","get","ref","limitRoutes","data","slice","onGetRoutes","console","log","clearRoutes","visitRoute","history","push","navigator","geolocation","getCurrentPosition","pos","coords","latitude","toString","longitude","search","this","routeTable","map","route","arrNum","parseInt","length","key","rating","Component","withRouter","connect","rts","dispatch","RouteView","loading","starToggle","clearStorage","localStorage","clear","saveRoute","filteredRoute","JSON","parse","getItem","filter","setItem","stringify","routeIDs","opposite","isSaved","includes","match","params","loc","xmlns","height","viewBox","width","d","fill","stars","imgSmallMed","alt","src","SavedRoutes","join","Axios","App","path","component","Boolean","window","hostname","store","createStore","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a093179b.chunk.js","sourcesContent":["const initialState = {\r\n  routes: \"sauce\"\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  if (action.type === \"GET_ROUTES\") {\r\n    return {\r\n      routes: action.routes\r\n    };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./Nav.scss\";\r\n\r\nconst Nav = props => {\r\n  return (\r\n    <header>\r\n      <nav className=\"nav\">\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/\" exact>\r\n              Search Routes\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/saved\">Saved Routes</NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./ClimbSearch.scss\";\r\n\r\nconst ClimbSearch = props => {\r\n  const margin = {\r\n    marginTop: \"1rem\"\r\n  };\r\n  return (\r\n    <div className=\"climb-search\">\r\n      <div style={margin} className=\"form-group\">\r\n        <label htmlFor=\"dynamic-label-input\">\r\n          How many miles do you want to go?\r\n        </label>\r\n        <input\r\n          onChange={props.disChange}\r\n          type=\"number\"\r\n          id=\"dynamic-label-input\"\r\n          placeholder=\"Distance in miles\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"min-select\">Select Difficulty</label>\r\n        <select onChange={props.difChange} id=\"min-select\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"beginner\">Beginner</option>\r\n          <option value=\"intermediate\">Intermediate</option>\r\n          <option value=\"advanced\">Advanced</option>\r\n          <option value=\"expert\">Expert</option>\r\n        </select>\r\n      </div>\r\n      <button className=\"btn\" onClick={props.clicked}>\r\n        Find Routes\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClimbSearch;\r\n","import React from \"react\";\r\n\r\nconst EachRoute = props => {\r\n  return (\r\n    <tr onClick={props.clicked}>\r\n      <td>{props.name}</td>\r\n      <td>{props.type}</td>\r\n      <td>{props.grade}</td>\r\n      <td>{props.location}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EachRoute;\r\n","import React from \"react\";\r\nimport \"./Route.scss\";\r\nimport EachRoute from \"./EachRoute\";\r\n\r\nconst Route = props => {\r\n  return (\r\n    <EachRoute\r\n      grade={props.grade}\r\n      type={props.type}\r\n      name={props.name}\r\n      location={props.location}\r\n      clicked={props.clicked}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Route;\r\n","import React, { Component } from \"react\";\r\nimport \"./Mountain.scss\";\r\nimport axios from \"axios\";\r\nimport ClimbSearch from \"../../Components/ClimbSearch/ClimbSearch\";\r\nimport Route from \"../../Components/Route/Route\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Mountain extends Component {\r\n  state = {\r\n    routes: null,\r\n    error: null,\r\n    lat: null,\r\n    long: null,\r\n    distance: \"50\",\r\n    minDiff: \"V0\",\r\n    maxDiff: \"V16\",\r\n    msg: null\r\n  };\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(pos => {\r\n      this.setState({\r\n        lat: pos.coords.latitude.toString(),\r\n        long: pos.coords.longitude.toString()\r\n      });\r\n    });\r\n  }\r\n  changeDistance = e => {\r\n    let distance = e.target.value;\r\n    this.setState({\r\n      distance: distance\r\n    });\r\n  };\r\n  changeDifficulty = e => {\r\n    let difficulty = e.target.value;\r\n    if (difficulty === \"all\") {\r\n      this.setState({\r\n        minDiff: \"V0\",\r\n        maxDiff: \"V16\"\r\n      });\r\n    }\r\n\r\n    if (difficulty === \"beginner\") {\r\n      this.setState({\r\n        minDiff: \"V0\",\r\n        maxDiff: \"V2\"\r\n      });\r\n    }\r\n    if (difficulty === \"intermediate\") {\r\n      this.setState({\r\n        minDiff: \"V3\",\r\n        maxDiff: \"V5\"\r\n      });\r\n    }\r\n    if (difficulty === \"advanced\") {\r\n      this.setState({\r\n        minDiff: \"V6\",\r\n        maxDiff: \"V10\"\r\n      });\r\n    }\r\n    if (difficulty === \"expert\") {\r\n      this.setState({\r\n        minDiff: \"V10\",\r\n        maxDiff: \"V16\"\r\n      });\r\n    }\r\n  };\r\n  findRoutes = async () => {\r\n    let apiKey = process.env.REACT_APP_KEY;\r\n    try {\r\n      let ref = await axios.get(\r\n        `https://www.mountainproject.com/data/get-routes-for-lat-lon?lat=${this.state.lat}&lon=${this.state.long}&maxDistance=${this.state.distance}&minDiff=${this.state.minDiff}&maxDiff=${this.state.maxDiff}&key=${apiKey}`\r\n      );\r\n      const limitRoutes = ref.data.routes.slice(0, 20);\r\n      this.props.onGetRoutes(limitRoutes);\r\n      this.setState({\r\n        routes: limitRoutes\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setState({ error });\r\n    }\r\n  };\r\n  clearRoutes = () => {\r\n    this.setState({\r\n      routes: null\r\n    });\r\n  };\r\n  visitRoute = id => {\r\n    this.props.history.push(`/route${id}`);\r\n  };\r\n\r\n  render() {\r\n    let search = (\r\n      <ClimbSearch\r\n        clicked={this.findRoutes}\r\n        difChange={this.changeDifficulty}\r\n        disChange={this.changeDistance}\r\n      />\r\n    );\r\n    let routeTable = null;\r\n    if (this.state.routes) {\r\n      search = null;\r\n      routeTable = this.state.routes.map(route => {\r\n        let arrNum = parseInt(route.location.length);\r\n        arrNum -= 1;\r\n        return (\r\n          <Route\r\n            key={route.id}\r\n            name={route.name}\r\n            type={route.type}\r\n            grade={route.rating}\r\n            location={route.location[arrNum]}\r\n            clicked={() => this.visitRoute(route.id)}\r\n          />\r\n        );\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div className=\"mountain\">\r\n        {!this.state.routes ? (\r\n          <h2>Find Climbing Routes Near You!</h2>\r\n        ) : (\r\n          <h2>Click a route for more details!</h2>\r\n        )}\r\n        {search}\r\n        {this.state.routes ? (\r\n          <table id=\"routes\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n                <th>Rating</th>\r\n                <th>Location</th>\r\n              </tr>\r\n            </thead>\r\n            <tr>{routeTable}</tr>\r\n          </table>\r\n        ) : null}\r\n        {this.state.routes ? (\r\n          <button onClick={this.clearRoutes} className=\"btn\">\r\n            Change Search\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    rts: state\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onGetRoutes: routes =>\r\n      dispatch({\r\n        type: \"GET_ROUTES\",\r\n        routes: routes\r\n      })\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(Mountain)\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport \"./RouteView.scss\";\r\n\r\nclass RouteView extends Component {\r\n  state = {\r\n    route: null,\r\n    loading: false,\r\n    starToggle: false\r\n  };\r\n  async componentDidMount() {\r\n    let isSaved = JSON.parse(localStorage.getItem(\"routeIDs\"));\r\n\r\n    if (isSaved === null) isSaved = [];\r\n\r\n    if (isSaved.includes(parseInt(this.props.match.params.id))) {\r\n      this.setState({ starToggle: true });\r\n    }\r\n    if (!this.state.route) {\r\n      let ref = await axios.get(\r\n        `https://www.mountainproject.com/data/get-routes?routeIds=${this.props.match.params.id}&key=200482277-6a6cd92f3d2c6bf7e97ea689bf580c56`\r\n      );\r\n      this.setState({ route: ref.data.routes[0] });\r\n    }\r\n  }\r\n  clearStorage = () => {\r\n    localStorage.clear();\r\n  };\r\n  saveRoute = () => {\r\n    if (!this.state.starToggle) {\r\n      let routeIDs = JSON.parse(localStorage.getItem(\"routeIDs\"));\r\n      if (routeIDs === null) routeIDs = [];\r\n      routeIDs.push(this.state.route.id);\r\n      localStorage.setItem(\"routeIDs\", JSON.stringify(routeIDs));\r\n    } else {\r\n      let routeIDs = JSON.parse(localStorage.getItem(\"routeIDs\"));\r\n      let filteredRoute = routeIDs.filter(route => {\r\n        return route != this.state.route.id;\r\n      });\r\n      console.log(filteredRoute);\r\n\r\n      localStorage.setItem(\"routeIDs\", JSON.stringify(filteredRoute));\r\n    }\r\n    const opposite = !this.state.starToggle;\r\n    this.setState({\r\n      starToggle: opposite\r\n    });\r\n  };\r\n  render() {\r\n    let location = <p>loading...</p>;\r\n    if (this.state.route) {\r\n      location = this.state.route.location.map(loc => {\r\n        return <p key={loc}>{loc}</p>;\r\n      });\r\n    }\r\n    return (\r\n      <div>\r\n        {this.state.route ? (\r\n          <div className=\"line\">\r\n            <div className=\"flex\">\r\n              <div className=\"info\">\r\n                <h2 onClick={this.clearStorage}>{this.state.route.name}</h2>\r\n                {!this.state.starToggle ? (\r\n                  <svg\r\n                    onClick={this.saveRoute}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    height=\"24\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    width=\"24\"\r\n                  >\r\n                    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                    <path d=\"M19.65 9.04l-4.84-.42-1.89-4.45c-.34-.81-1.5-.81-1.84 0L9.19 8.63l-4.83.41c-.88.07-1.24 1.17-.57 1.75l3.67 3.18-1.1 4.72c-.2.86.73 1.54 1.49 1.08l4.15-2.5 4.15 2.51c.76.46 1.69-.22 1.49-1.08l-1.1-4.73 3.67-3.18c.67-.58.32-1.68-.56-1.75zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\" />\r\n                  </svg>\r\n                ) : (\r\n                  <svg\r\n                    onClick={this.saveRoute}\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    height=\"24\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    width=\"24\"\r\n                  >\r\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                    <path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\" />\r\n                    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                  </svg>\r\n                )}\r\n                <p className=\"local\">Location</p>\r\n                <div className=\"info-line\">{location}</div>\r\n                <div className=\"info-line\">\r\n                  <p className=\"emph\">Type:</p> <p>{this.state.route.type}</p>\r\n                </div>\r\n                <div className=\"info-line\">\r\n                  <p className=\"emph\">Grade:</p>{\" \"}\r\n                  <p>{this.state.route.rating}</p>\r\n                </div>\r\n                <div className=\"info-line\">\r\n                  <p className=\"emph\">Rating:</p>{\" \"}\r\n                  <p> {this.state.route.stars} Stars</p>\r\n                </div>\r\n              </div>\r\n              {this.state.route.imgSmallMed ? (\r\n                <img alt=\"Selected Route\" src={this.state.route.imgSmallMed} />\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <p>loading...</p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    rts: state\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(RouteView);\r\n","import React, { Component } from \"react\";\r\nimport Route from \"../../Components/Route/Route\";\r\nimport Axios from \"axios\";\r\n\r\nclass SavedRoutes extends Component {\r\n  state = {\r\n    routes: null\r\n  };\r\n  async componentDidMount() {\r\n    let routeIDs = JSON.parse(localStorage.getItem(\"routeIDs\"));\r\n    routeIDs.join();\r\n    let ref = await Axios.get(\r\n      `https://www.mountainproject.com/data/get-routes?routeIds=${routeIDs}&key=200482277-6a6cd92f3d2c6bf7e97ea689bf580c56`\r\n    );\r\n    this.setState({\r\n      routes: ref.data.routes\r\n    });\r\n  }\r\n  visitRoute = id => {\r\n    this.props.history.push(`/route${id}`);\r\n  };\r\n  render() {\r\n    let routeTable = <p>loading...</p>;\r\n    if (this.state.routes) {\r\n      routeTable = this.state.routes.map(route => {\r\n        let arrNum = parseInt(route.location.length);\r\n        arrNum -= 1;\r\n        return (\r\n          <Route\r\n            key={route.id}\r\n            name={route.name}\r\n            type={route.type}\r\n            grade={route.rating}\r\n            location={route.location[arrNum]}\r\n            clicked={() => this.visitRoute(route.id)}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"saved-routes\">\r\n        <h2>SavedRoutes</h2>\r\n        <p>Click a route for more details!</p>\r\n        {this.state.routes ? (\r\n          <table id=\"routes\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n                <th>Rating</th>\r\n                <th>Location</th>\r\n              </tr>\r\n            </thead>\r\n            {routeTable}\r\n          </table>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SavedRoutes;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./Components/Nav/Nav\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Mountain from \"./Containers/Mountain/Mountain\";\nimport RouteView from \"./Containers/RouteView/RouteView\";\nimport SavedRoutes from \"./Containers/SavedRoutes/SavedRoutes\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Nav />\n        <Route path=\"/\" exact component={Mountain} />\n        <Route path=\"/route:id\" component={RouteView} />\n        <Route path=\"/saved\" component={SavedRoutes} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./store/reducer\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}